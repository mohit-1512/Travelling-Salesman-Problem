package Start;

public class start {

	public static void main(String[] args) {
		if(args.length<4) {
			System.out.println("java Start/start <SearchStrategy(SIM/SOPH)> "
					+ "<Cost Function(C1/C2/C3)> <Number of Cities-N Ex(10,30,60..)>"
					+ "<MEB>"
					+ "<Seed- For SOPH algorithm Optional Parameters Ex(0,20, ...)>");	
		}
		int noOfCities=Integer.parseInt(args[2]);
		int[][] dist=new int[noOfCities][noOfCities];
		String costFunc=args[1].toLowerCase();
		int MEB=Integer.parseInt(args[3]);
		switch (costFunc) {
		case "c1":

			break;
		case "c2":

			break;
		case "c3":

			break;
		default:
			System.out.println("Invalid cost function");
			System.exit(0);
		}
		
		if(args[0].equalsIgnoreCase("SIM")) {

		}else if(args[0].equalsIgnoreCase("SOPH")){

		}else {
			System.out.println("Invalid search strategy");
			System.exit(0);
		}
	}
	private int getDistanceC1(int city1, int city2) {
    	int dist=0;
		if(city1==city2) {
			dist=Integer.MAX_VALUE;
		}else if (city1<3 && city2<3) {
			dist=1;
		}else if (city1<3) {
			dist=200;
		}else if (city2<3) {
			dist=200;
		}else if (city1%7==city2%7) {
			dist=2;
		}else {
			dist=Math.abs(city1-city2)+3;
		}
		return dist;
	}

//
////private int getDistanceC2(int city1, int city2) {
////	int dist=0;
////	if(city1==city2) {
////		dist=0;
////	}else if (city1+city2<10) {
////		dist=Math.abs(city1-city2)+4;
////	}else if ((city1+city2)%11==0) {
////		dist=3;
////	}else {
////		dist=(int) (Math.pow((double)Math.abs(city1-city2),2)+10);
////	}
////	return dist;
////}
//
//
////  private int getDistanceC3(int city1, int city2) {
////		int dist=0;
////		if(city1==city2) {
////		dist=0;
////		}else {
////		dist=(int) Math.pow(city1+city2,2);
////		}
////		return dist;
////}

}
