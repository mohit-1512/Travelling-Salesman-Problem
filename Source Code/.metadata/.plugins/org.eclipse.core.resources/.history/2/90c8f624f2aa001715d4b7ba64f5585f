package simmulatedAnnealing;

import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Random;

public class SimulatedAnnealing {
	String outputFileName="/Users/mohitgkaduskar/Documents/AI output/2runs.txt";
	static int noOfCities;
	static Random randomno;
	static int distance[][];
	public SimulatedAnnealing(int noOfCities,int seed,int MEBBound,int distance[][]) {
		int MEB=0;
		this.distance=distance;
		this.noOfCities=noOfCities;
		double temp =1000;
		double coolingRate = 0.00003;
		randomno=new Random(seed);
		ArrayList<Integer> path=new ArrayList<>();
		for(int city=0;city<noOfCities;city++) {
			path.add(city);
		}
		Collections.shuffle(path, randomno);
		ArrayList<Integer> bestPath=(ArrayList<Integer>) path.clone();
		int bestPathCost=getTotalCost(path);
		while(temp>0.0001) {
			MEB++;
			ArrayList<Integer> nextPath=(ArrayList<Integer>) path.clone();
			int p1 = (int) (this.noOfCities* randomno.nextDouble());
			int p2 = (int) (this.noOfCities* randomno.nextDouble());
			int city1=path.get(p1);
			int city2=path.get(p2);
			nextPath.set(p1, city2);
			nextPath.set(p2, city1);
			int pathCost=getTotalCost(path);
			int nextPathCost=getTotalCost(nextPath);
			if(nextPathCost<pathCost) {
				path=nextPath;
			}else if(Math.exp((pathCost - nextPathCost) / temp) > randomno.nextDouble()) {
				path=nextPath;
			}
			
			if(bestPathCost>getTotalCost(path)) {
				bestPath=path;
				bestPathCost=getTotalCost(path);
			}
			temp *= 1-coolingRate;
			if(MEB==MEBBound) {
				break;
			}
		}
		
		FileWriter fileWriter = new FileWriter(new File(outputFileName));
		fileWriter.write("TSP by Simulated Annealing");
//		System.out.println("Path of TSP");
//		getPath(bestPath);
		int i=0;
		for(i=0;i<noOfCities-1;i++) {
			fileWriter.write(path.get(i)+"-->");
		}
		fileWriter.write(path.get(i)+"-->"+path.get(0));
		fileWriter.write("\nTotal Cost-"+getTotalCost(bestPath));
		fileWriter.write("\nMEB"+MEB);
	}
	void getPath(ArrayList<Integer> path){
		int i=0;
		for(i=0;i<noOfCities-1;i++) {
			System.out.print(path.get(i)+"-->");
		}
		System.out.print(path.get(i)+"-->"+path.get(0));
	}
	static int getTotalCost(ArrayList<Integer> path) {
		int cost=0;
		int i=0;
		for(i=0;i<noOfCities-1;i++) {
			cost+=distance[path.get(i)][path.get(i+1)];
		}
		cost+=distance[path.get(i)][path.get(0)];
		return cost;
	}
}
